//go:build ignore
// +build ignore

package main

import (
	"bufio"
	"encoding/json"
	"log"
	"os"
	"strconv"
	"strings"
)

import (
	"text/template"
)

func main() {
	optionFile, _ := os.Open("data/button_mappings")

	sc := bufio.NewScanner(optionFile)
	mappings := map[string]int{}

	for sc.Scan() {
		values := strings.Split(sc.Text(), "=")

		buttonValue, err := strconv.Atoi(values[1])
		if err != nil {
			log.Fatal(err)
		}

		log.Println(values[0], buttonValue)

		mappings[values[0]] = buttonValue

	}

	f, err := os.Create("buttonPress.go")
	if err != nil {
		log.Fatal(err)
	}

	buttonPressTemplate.Execute(f, mappings)

	d, _ := os.Open("data/custom_events.json")
	var customEvents []CustomEvent
	json.NewDecoder(d).Decode(&customEvents)

	file, err := os.Create("customEvents.go")
	if err != nil {
		log.Fatal(err)
	}
	CustomEventsTemplate.Execute(file, customEvents)
}

type CustomEvent struct {
	Name   string `json:"Name"`
	Press  string `json:"Press"`
	Params string `json:"Params"`
}

var buttonPressTemplate = template.Must(template.New("").Parse(`// Package HotRemote Code generated by go generate; DO NOT EDIT.
package HotRemote

const (
{{- range $key, $value := . }}
	{{$key}} = {{$value}}
{{- end }}
)
{{- range $key, $value := . }}

func (s *Session) {{$key}}() {
	s.ButtonPress({{$key}})
}

{{- end }}

`))

var CustomEventsTemplate = template.Must(template.New("").Parse(`// Package HotRemote Code generated by go generate; DO NOT EDIT.
package HotRemote

{{- range . }}

func (s *Session) {{.Name}}() {
	s.client.CustomEvent(s.targetBox, "{{.Press}}", "{{.Params}}")
}

{{- end }}

`))
